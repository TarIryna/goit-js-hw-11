{"version":3,"sources":["js/timer.js"],"names":["convertMs","ms","days","Math","floor","hour","hours","minute","minutes","second","seconds","console","log","dateBtn","document","querySelector","alert","daysI","hoursI","minutesI","secondsI","isStarted","pad","value","String","padStart","startTimer","setInterval","inputValue","Date","getElementById","currentTime","classList","add","setTimeout","remove","deltaTime","resultTime","textContent","addEventListener"],"mappings":";AAAA,SAASA,EAAUC,GAgBV,MAAA,CAAEC,KARIC,KAAKC,MAAMH,EAHZI,OAWGC,MANDH,KAAKC,MAAOH,EALdI,MADCE,MAYSC,QAJNL,KAAKC,MAAQH,EAPjBI,MADCE,KADEE,KAagBC,QAFfP,KAAKC,MAASH,EATlBI,MADCE,KADEE,IADA,MAiBjBE,QAAQC,IAAIZ,EAAU,MACtBW,QAAQC,IAAIZ,EAAU,OACtBW,QAAQC,IAAIZ,EAAU,SAGtB,MAAMa,EAAUC,SAASC,cAAc,gBACjCC,EAAQF,SAASC,cAAc,KAC/BE,EAAQH,SAASC,cAAc,eAC/BG,EAASJ,SAASC,cAAc,gBAChCI,EAAWL,SAASC,cAAc,kBAClCK,EAAWN,SAASC,cAAc,kBAClCM,GAAY,EAIlB,SAASC,EAAIC,GACFC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAMrC,SAASC,IACLC,YAAY,KACNC,MAAAA,EAAa,IAAIC,KAAMf,SAASgB,eAAe,iBAAiBP,OAClEQ,IAAAA,EAAc,IAAIF,KAClBD,GAAAA,EAAaG,GAAeV,EAK5B,OAJAL,EAAMgB,UAAUC,IAAI,cACpBC,WAAW,KACPlB,EAAMgB,UAAUG,OAAO,UACvB,KAIEC,MACAC,EAAarC,EADD4B,EAAaG,GAE/Bd,EAAMqB,YAAchB,EAAIe,EAAWnC,MACnCgB,EAAOoB,YAAchB,EAAIe,EAAW/B,OACpCa,EAASmB,YAAchB,EAAIe,EAAW7B,SACtCY,EAASkB,YAAchB,EAAIe,EAAW3B,UACvC,KA3BPG,EAAQ0B,iBAAiB,QAASb","file":"timer.951298fb.js","sourceRoot":"../src","sourcesContent":["function convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); //{days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6, minutes: 42, seconds: 20}\n\n\nconst dateBtn = document.querySelector('[data-start]');\nconst alert = document.querySelector('p');\nconst daysI = document.querySelector('[data-days]');\nconst hoursI = document.querySelector('[data-hours]');\nconst minutesI = document.querySelector('[data-minutes]');\nconst secondsI = document.querySelector('[data-seconds]');\nconst isStarted = false;\n\ndateBtn.addEventListener('click', startTimer);\n\nfunction pad(value) {\n    return String(value).padStart(2, '0');\n}\n// function daysPad(value) {\n//     return String(value).padStart(3, '0');\n// }\n\nfunction startTimer() {\n    setInterval(() => {\n    const inputValue = new Date (document.getElementById('date-selector').value);\n    var currentTime = new Date();\n    if (inputValue < currentTime || isStarted) {\n        alert.classList.add('error');\n        setTimeout(() => {\n            alert.classList.remove('error');\n         }, 2000);\n        return;\n    }\n    \n        const deltaTime = inputValue - currentTime;\n        const resultTime = convertMs(deltaTime);\n        daysI.textContent = pad(resultTime.days);\n        hoursI.textContent = pad(resultTime.hours);\n        minutesI.textContent = pad(resultTime.minutes);\n        secondsI.textContent = pad(resultTime.seconds);\n    }, 1000);\n\n}\n\n// let timerInterval;\n// Swal.fire({\n//   title: 'Auto close alert!',\n//   html: 'I will close in <b></b> milliseconds.',\n//   timer: 2000,\n//   timerProgressBar: true,\n//   didOpen: () => {\n//     Swal.showLoading()\n//     timerInterval = setInterval(() => {\n//       const content = Swal.getHtmlContainer()\n//       if (content) {\n//         const b = content.querySelector('b')\n//         if (b) {\n//           b.textContent = Swal.getTimerLeft()\n//         }\n//       }\n//     }, 100)\n//   },\n//   willClose: () => {\n//     clearInterval(timerInterval)\n//   }\n// }).then((result) => {\n//   /* Read more about handling dismissals below */\n//   if (result.dismiss === Swal.DismissReason.timer) {\n//     console.log('I was closed by the timer')\n//   }\n// })"]}