{"version":3,"sources":["js/color.js","js/timer.js","index.js"],"names":["DELAY","body","document","querySelector","startBtn","stopBtn","timerId","isActive","getRandomHexColor","Math","floor","random","toString","onClickStart","console","log","setInterval","color","style","backgroundColor","localStorage","setItem","onClickStop","getItem","clearInterval","addEventListener","convertMs","ms","days","hour","hours","minute","minutes","second","seconds","dateBtn","alert","daysI","hoursI","minutesI","secondsI","isStarted","pad","value","String","padStart","daysPad","startTimer","inputValue","Date","getElementById","currentTime","classList","add","setTimeout","remove","deltaTime","resultTime","textContent"],"mappings":";;;AAUA,MAAMA,EAAQ,IACRC,EAAOC,SAASC,cAAc,QAC9BC,EAAWF,SAASC,cAAc,yBAClCE,EAAUH,SAASC,cAAc,wBACjCG,EAAU,KAChB,IAAIC,GAAW,EAWf,SAASC,IACC,UAAGC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MAG3D,SAASC,IACHN,GAAAA,EAEF,YADEO,QAAQC,IAAI,yBAGTT,MAAAA,EAAUU,YAAY,KACnBC,MAAAA,EAAQT,IACdP,EAAKiB,MAAMC,gBAAkBF,EAAML,WACpCL,GAAW,EACXa,aAAaC,QAAQ,UAAUf,IACjCN,GAGH,SAASsB,IACHhB,MAAAA,EAAUc,aAAaG,QAAQ,WACnCC,cAAclB,GACdC,GAAW,EA3BbH,EAASqB,iBAAiB,QAASZ,GACnCR,EAAQoB,iBAAiB,QAASH;;ACpBlC,SAASI,EAAUC,GAgBV,MAAA,CAAEC,KARInB,KAAKC,MAAMiB,EAHZE,OAWGC,MANDrB,KAAKC,MAAOiB,EALdE,MADCE,MAYSC,QAJNvB,KAAKC,MAAQiB,EAPjBE,MADCE,KADEE,KAagBC,QAFfzB,KAAKC,MAASiB,EATlBE,MADCE,KADEE,IADA,MAiBjBnB,QAAQC,IAAIW,EAAU,MACtBZ,QAAQC,IAAIW,EAAU,OACtBZ,QAAQC,IAAIW,EAAU,SAGtB,MAAMS,EAAUjC,SAASC,cAAc,gBACjCiC,EAAQlC,SAASC,cAAc,KAC/BkC,EAAQnC,SAASC,cAAc,eAC/BmC,EAASpC,SAASC,cAAc,gBAChCoC,EAAWrC,SAASC,cAAc,kBAClCqC,EAAWtC,SAASC,cAAc,kBAClCsC,GAAY,EAIlB,SAASC,EAAIC,GACFC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAErC,SAASC,EAAQH,GACNC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGrC,SAASE,IACL/B,YAAY,KACNgC,MAAAA,EAAa,IAAIC,KAAM/C,SAASgD,eAAe,iBAAiBP,OAClEQ,IAAAA,EAAc,IAAIF,KAClBD,GAAAA,EAAaG,GAAeV,EAK5B,OAJAL,EAAMgB,UAAUC,IAAI,cACpBC,WAAW,KACPlB,EAAMgB,UAAUG,OAAO,UACvB,KAIEC,MACAC,EAAa/B,EADDsB,EAAaG,GAE/Bd,EAAMqB,YAAcZ,EAAQW,EAAW7B,MACvCU,EAAOoB,YAAchB,EAAIe,EAAW3B,OACpCS,EAASmB,YAAchB,EAAIe,EAAWzB,SACtCQ,EAASkB,YAAchB,EAAIe,EAAWvB,UACvC,KA3BPC,EAAQV,iBAAiB,QAASsB;;AC5BlC,aAJA,QAAA,oBAEA,QAAA,cACA,QAAA,cACA,QAAA","file":"src.f25e7669.js","sourceRoot":"../src","sourcesContent":["// const colors = [\n//   '#FFFFFF',\n//   '#2196F3',\n//   '#4CAF50',\n//   '#FF9800',\n//   '#009688',\n//   '#795548',\n// ];\n \n\nconst DELAY = 1000;\nconst body = document.querySelector('body');\nconst startBtn = document.querySelector('[data-action=\"start\"]');\nconst stopBtn = document.querySelector('[data-action=\"stop\"]');\nconst timerId = null;\nlet isActive = false;\n\n\n \nstartBtn.addEventListener('click', onClickStart);\nstopBtn.addEventListener('click', onClickStop);\n\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\nfunction onClickStart() {\n  if (isActive) {\n      console.log('уже активно - выходим');\n    return;\n  }\n   const timerId = setInterval(() => {\n      const color = getRandomHexColor();\n      body.style.backgroundColor = color.toString();\n     isActive = true;\n     localStorage.setItem('timerId',timerId);\n}, DELAY);\n} \n\nfunction onClickStop() {\nconst timerId = localStorage.getItem('timerId');\n  clearInterval(timerId);\n  isActive = false;\n}\n","function convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); //{days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6, minutes: 42, seconds: 20}\n\n\nconst dateBtn = document.querySelector('[data-start]');\nconst alert = document.querySelector('p');\nconst daysI = document.querySelector('[data-days]');\nconst hoursI = document.querySelector('[data-hours]');\nconst minutesI = document.querySelector('[data-minutes]');\nconst secondsI = document.querySelector('[data-seconds]');\nconst isStarted = false;\n\ndateBtn.addEventListener('click', startTimer);\n\nfunction pad(value) {\n    return String(value).padStart(2, '0');\n}\nfunction daysPad(value) {\n    return String(value).padStart(3, '0');\n}\n\nfunction startTimer() {\n    setInterval(() => {\n    const inputValue = new Date (document.getElementById('date-selector').value);\n    var currentTime = new Date();\n    if (inputValue < currentTime || isStarted) {\n        alert.classList.add('error');\n        setTimeout(() => {\n            alert.classList.remove('error');\n         }, 2000);\n        return;\n    }\n    \n        const deltaTime = inputValue - currentTime;\n        const resultTime = convertMs(deltaTime);\n        daysI.textContent = daysPad(resultTime.days);\n        hoursI.textContent = pad(resultTime.hours);\n        minutesI.textContent = pad(resultTime.minutes);\n        secondsI.textContent = pad(resultTime.seconds);\n    }, 1000);\n\n}\n\n// let timerInterval;\n// Swal.fire({\n//   title: 'Auto close alert!',\n//   html: 'I will close in <b></b> milliseconds.',\n//   timer: 2000,\n//   timerProgressBar: true,\n//   didOpen: () => {\n//     Swal.showLoading()\n//     timerInterval = setInterval(() => {\n//       const content = Swal.getHtmlContainer()\n//       if (content) {\n//         const b = content.querySelector('b')\n//         if (b) {\n//           b.textContent = Swal.getTimerLeft()\n//         }\n//       }\n//     }, 100)\n//   },\n//   willClose: () => {\n//     clearInterval(timerInterval)\n//   }\n// }).then((result) => {\n//   /* Read more about handling dismissals below */\n//   if (result.dismiss === Swal.DismissReason.timer) {\n//     console.log('I was closed by the timer')\n//   }\n// })","import './sass/main.scss';\n\nimport './js/color';\nimport './js/timer';\nimport './js/promise';"]}